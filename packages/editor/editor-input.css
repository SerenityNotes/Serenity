@tailwind base;
@tailwind components;
@tailwind utilities;

/* Classes included via @layer will only be in the compiled CSS if we use them in code */
@layer base {
  /*
    + use of opacity possible
  */
  ::selection {
    @apply bg-primary-400/50;
  }

  h1 {
    @apply mt-12 mb-3 text-3xl font-bold;
  }
  h2 {
    @apply mt-10 mb-2 text-2xl font-bold;
  }
  h3 {
    @apply mt-6 mb-1.5 text-xl font-bold;
  }
  /* fixed leading needed for tasklist-icon alignment  */
  p {
    @apply my-2 leading-6 text-mobile sm:text-base;
  }
  a {
    @apply text-primary-500 underline;
  }

  /* used for inline- and blockcode */
  code {
    @apply text-sm text-gray-800;
  }

  blockquote {
    @apply my-4 pl-4 border-solid border-l-4 border-primary-400;
  }

  /* --- lists --- */
  ol,
  ul {
    @apply my-4;
  }
  /* avoid jumping when initializing a list before any other element */
  ol:first-child li,
  ul:first-child li {
    @apply mt-0;
  }
  ol,
  ul:not([data-type="taskList"]) {
    @apply pl-4;
  }
  ol li,
  ul li {
    @apply my-2;
  }
  ol li,
  ul:not([data-type="taskList"]) li {
    /* to align text-indent of blockelements (list, quote, codeblock) */
    @apply pl-1;
  }
  /* remove p margin as we use the spacing on list-elements */
  ol p,
  ul p {
    margin: 0;
  }
  ol {
    @apply list-decimal;
  }
  ul:not([data-type="taskList"]) {
    @apply list-disc;
  }

  /* --- taskList --- */
  ul[data-type="taskList"] li {
    @apply flex;
    position: relative;
  }
  ul[data-type="taskList"] label + div {
    padding-left: 0.5rem;
  }
  ul[data-type="taskList"] input[type="checkbox"] {
    opacity: 0;
    position: absolute;
  }
  /* - css checkbox - */
  ul[data-type="taskList"] li input + span {
    position: relative;
    display: block;
    /* fixed width needed for absolute positioning of children */
    width: 1rem;
  }
  ul[data-type="taskList"] li input + span:before,
  ul[data-type="taskList"] li input + span:after {
    content: "";
    position: absolute;
    display: inline-block;
  }
  ul[data-type="taskList"] li input + span:before {
    width: 1rem;
    height: 1rem;
    border: 0.125rem solid theme("colors.gray.600");
    border-radius: 0.125rem;
    margin-top: 0.25rem;
  }
  /* - css checkbox : checked - */
  ul[data-type="taskList"] li input:checked + span:before {
    border-color: theme("colors.primary.400");
    background-color: theme("colors.primary.400");
  }
  ul[data-type="taskList"] li input:checked + span:after {
    top: 0.5rem;
    left: 0.125rem;
    width: 0.75rem;
    height: 0.375rem;
    border-left: 0.125rem solid white;
    border-bottom: 0.125rem solid white;
    transform: rotate(-45deg);
  }
  ul[data-type="taskList"] li[data-checked="true"] p {
    text-decoration: line-through;
    color: theme("colors.gray.600");
  }

  /* --- editor --- */
  .ProseMirror {
    @apply w-full max-w-prose mx-auto;
  }
}

/* ::selection {
  background-color: theme('colors.primary.400');
} */

/* This will always be included in our compiled CSS */
.ProseMirror:focus {
  outline: none;
}

/* --- ????????????? --- */
/* should we work with a custom wrapper class or just use the ProseMirror as editor wrapper entry */
.ProseMirror > *:first-child {
  margin-top: 0;
}

/* ------------------------- */
/* TODO remove after testing */
/* ------------------------- */
h1,
h2,
h3 {
  /* background-color: rgba(109, 30, 255, 0.15); */
}
p {
  /* background-color: rgba(109, 30, 255, 0.05); */
}
.ProseMirror {
  /* background-color: rgba(255, 230, 147, 0.5); */
}
