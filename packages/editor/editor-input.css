@tailwind base;
@tailwind components;
@tailwind utilities;

/* Classes included via @layer will only be in the compiled CSS if we use them in code */
@layer base {
  /*
    + use of opacity possible
  */
  ::selection {
    @apply bg-primary-400/50;
  }

  h1 {
    @apply mt-12 mb-3 text-h1 font-bold;
  }
  h2 {
    @apply mt-10 mb-2 text-h2 font-bold;
  }
  h3 {
    @apply mt-6 mb-1.5 text-h3 font-bold;
  }
  /* fixed leading needed for tasklist-icon alignment  */
  p {
    @apply text-mobile leading-6 sm:text-base;
  }
  * + p {
    @apply mt-2;
  }
  a {
    @apply text-primary-500 underline;
  }

  /* --- editor --- */
  .ProseMirror {
    @apply px-4 pt-10 xs:px-6 sm:px-10 md:pt-14 lg:px-16;
    /* calculate container-height for seamless scrolling */
    height: calc(100vh - theme("height.top-bar"));
  }

  /* needed so area actually scrolls to the end of the editor with some space left */
  .ProseMirror > *:last-child {
    @apply pb-10 md:pb-14;
  }

  .has-editor-bottombar .ProseMirror > *:last-child {
    @apply pb-96; /* space for the keyboard on mobile */
  }

  /* needed to make all area of the editor clickable which enables activating the cursor on each written line */
  .ProseMirror > * {
    @apply mx-auto w-full max-w-prose-rem;
  }

  /* needed so margin of first element doesn't make content 'jump' */
  .ProseMirror > *:first-child {
    margin-top: 0;
  }

  /* --- placeholder --- */
  .ProseMirror *.is-editor-empty:first-child::before {
    color: theme("colors.gray.400");
    content: "Just start writing here …";
    float: left;
    height: 0;
    pointer-events: none;
  }

  .ProseMirror h1:first-child.is-empty::before {
    color: theme("colors.gray.400");
    content: "Page title";
    float: left;
    height: 0;
    pointer-events: none;
  }

  .ProseMirror h1:first-child.is-empty::after {
    font-size: 1rem;
    font-weight: normal;
    color: theme("colors.gray.400");
    content: "Just start writing here …";
    float: left;
    height: 0;
    margin-bottom: 2.5rem;
    pointer-events: none;
  }
}

@layer components {
  blockquote {
    @apply my-4 border-l-4 border-solid border-primary-400 pl-4;
  }

  /* --- code --- */

  /* used for inline- and blockcode */
  code {
    @apply text-sm text-gray-800;
  }

  .code-extension {
    /* using pt-1/pb-0.5 so that code elements in adjacent lines don't overlap and the Text still looks centered */
    @apply rounded bg-gray-200 px-1.5 pt-1 pb-0.5;
  }

  .code-block-extension {
    @apply my-4 rounded border border-solid border-gray-200 bg-gray-100 p-4;
  }

  /* --- lists --- */
  .ProseMirror > ol,
  .ProseMirror > ul {
    @apply my-4;
  }
  ol,
  ul:not(.task-list-extension) {
    @apply pl-4.5;
  }
  ol li,
  ul:not(.task-list-extension) li {
    /* to align text-indent of blockelements (list, quote, codeblock) */
    @apply pl-0.5;
  }
  /* avoid jumping when initializing a list before any other element */
  li + li {
    @apply mt-2;
  }
  ol {
    @apply list-decimal;
  }
  ul:not(.task-list-extension) {
    @apply list-disc;
  }

  li ol,
  li ul {
    @apply mt-2;
  }

  ol ol,
  ol ul:not(.task-list-extension),
  ul:not(.task-list-extension) ol,
  ul:not(.task-list-extension) ul:not(.task-list-extension) {
    border-left: 1px solid rgb(227, 227, 227);
  }

  ol ol,
  ol ul:not(.task-list-extension) {
    padding-left: 2.4rem;
  }

  ul:not(.task-list-extension) ol,
  ul:not(.task-list-extension) ul:not(.task-list-extension) {
    padding-left: 2rem;
  }

  /* needs to be as specific as the margins override each other otherwise */
  ul:not(.task-list-extension) > li > ol,
  ul:not(.task-list-extension) > li > ul:not(.task-list-extension) {
    margin-left: -0.85rem;
  }

  /* needs to be as specific as the margins override each other otherwise */
  ol > li > ol,
  ol > li > ul:not(.task-list-extension) {
    margin-left: -1rem;
  }

  ol li::marker,
  ul:not(.task-list-extension) li::marker {
    color: rgb(121, 121, 121);
  }

  /* to avoid lines that end in nothing */
  li:last-child > ol,
  li:last-child > ul:not(.task-list-extension) {
    border-left-color: transparent;
  }

  /* Safari only override as list elements, especially ol, are aligned differently */
  @media not all and (min-resolution: 0.001dpcm) {
    @supports (-webkit-appearance: none) and (stroke-color: transparent) {
      .ProseMirror > ol {
        margin-left: 0.35rem;
      }

      .ProseMirror > ul:not(.task-list-extension) {
        margin-left: 0.2rem;
      }

      ol ol,
      ol ul:not(.task-list-extension) {
        padding-left: 2.8rem;
      }

      ul:not(.task-list-extension) ol,
      ul:not(.task-list-extension) ul:not(.task-list-extension) {
        padding-left: 2.8rem;
      }

      ol > li > ol,
      ol > li > ul:not(.task-list-extension) {
        margin-left: -1.35rem;
      }

      ul:not(.task-list-extension) > li > ol,
      ul:not(.task-list-extension) > li > ul:not(.task-list-extension) {
        margin-left: -1.25rem;
      }
    }
  }

  /* --- taskList --- */
  .task-item-extension {
    @apply flex;
    position: relative;
  }
  .task-item-extension label {
    margin-top: 0.25rem;
    height: 1rem;
  }
  .task-item-extension label + div {
    padding-left: 0.5rem;
    flex-grow: 1;
    overflow-wrap: anywhere; /* needed so longer words break midline and not the ui */
  }
  .task-item-extension input[type="checkbox"] {
    opacity: 0;
    position: absolute;
  }

  /* - css checkbox - */
  .task-item-extension input + span {
    position: relative;
    display: block;
    height: 1rem;
    /* fixed width needed for absolute positioning of children */
    width: 1rem;
  }
  .task-item-extension input + span:before,
  .task-item-extension input + span:after {
    content: "";
    position: absolute;
    display: inline-block;
  }
  .task-item-extension input + span:before {
    width: 1rem;
    height: 1rem;
    /* as browsers interpret 1.5px - 1.9px mostly the same this is the best scalable option */
    border: 0.1rem solid theme("colors.gray.600");
    border-radius: 0.125rem;
  }

  /* - css checkbox : hover - */
  .task-item-extension label > span:hover {
    cursor: pointer;
  }

  .task-item-extension label > span:hover:before {
    background-color: theme("colors.gray.200");
  }

  /* - css checkbox : checked - */
  .task-item-extension input:checked + span:before {
    border-color: theme("colors.primary.400");
    background-color: theme("colors.primary.400");
  }
  .task-item-extension input:checked + span:after {
    top: 0.25rem;
    left: 0.125rem;
    width: 0.75rem;
    height: 0.375rem;
    border-left: 0.125rem solid white;
    border-bottom: 0.125rem solid white;
    transform: rotate(-45deg);
  }
  .task-item-extension[data-checked="true"] p {
    text-decoration: line-through;
    color: theme("colors.gray.600");
  }

  /* - clickable area for checkbox - */
  .task-item-extension label:before {
    content: "";
    position: absolute;
    margin-top: -0.375rem;
    margin-left: -0.375rem;
    height: 1.75rem;
    width: 1.75rem;
  }

  .image-extenstion {
    /* --- */
  }
}

@layer utilities {
  .shimmerBG {
    animation-duration: 3s;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: shimmer;
    animation-timing-function: linear;
    background: #ededf0; /* gray-200 as backup */
    /* gray-150 (calculated), gray-200, gray-150 */
    background: linear-gradient(to right, #f5f5f7 8%, #ededf0 20%, #f5f5f7 33%);
    background-size: 1200px 100%;
  }

  @-webkit-keyframes shimmer {
    0% {
      background-position: -100% 0;
    }
    100% {
      background-position: 100% 0;
    }
  }

  @keyframes shimmer {
    0% {
      background-position: -1200px 0;
    }
    100% {
      background-position: 1200px 0;
    }
  }
}

/* Code following this will always be included in our compiled CSS */

/* --- custom file extension --- */
/* needs to be added here as tailwind only adds stylings when they 
are used in code, and the node-file class is autogenerated */

.node-file [class*="css-text"] {
  cursor: default; /* added so whole node looks clickable and still download button is different */
}

/* ::selection {
  background-color: theme('colors.primary.400');
} */

/* --- ProseMirror --- */

/* needed overrides to disable focus-outline while writing inside the Editor */
.ProseMirror:focus {
  outline: none;
}
.ProseMirror[data-focusvisible-polyfill] {
  outline: none;
}

/* ------------------------- */
/* ------- debugging ------- */
/* ------------------------- */

/* howto: add show-sections class to EditorContent className */

.show-sections .ProseMirror {
  background-color: rgba(255, 230, 147, 0.5);
}
.show-sections .ProseMirror[data-focusvisible-polyfill] {
  outline: 2px solid orange;
}
.show-sections h1,
.show-sections h2,
.show-sections h3 {
  background-color: rgba(109, 30, 255, 0.15);
}
.show-sections p {
  background-color: rgba(109, 30, 255, 0.05);
}

.show-sections .task-item-extension label:before {
  background-color: rgba(222, 65, 227, 0.371);
}
