datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  output          = "./generated/output"
}

model Document {
  id               String     @id
  activeSnapshot   Snapshot?  @relation(name: "activeSnapshot", fields: [activeSnapshotId], references: [id])
  activeSnapshotId String?    @unique
  snapshots        Snapshot[]
  createdAt        DateTime   @default(now())
}

model Snapshot {
  id                     String    @id @default(uuid())
  latestVersion          Int
  data                   String
  preview                String // title & icon
  document               Document  @relation(fields: [documentId], references: [id])
  documentId             String
  updates                Update[]
  activeSnapshotDocument Document? @relation("activeSnapshot")
  createdAt              DateTime  @default(now())
  clocks                 Json
}

model Update {
  id              String   @id @default(uuid())
  version         Int
  data            String
  snapshot        Snapshot @relation(fields: [snapshotId], references: [id])
  snapshotId      String
  snapshotVersion Int
  pubKey          String

  @@unique([snapshotId, version])
  @@unique([snapshotId, pubKey, snapshotVersion])
}

model Registration {
  username         String @id
  serverPrivateKey String
  serverPublicKey  String @default("invalid")
  oprfPrivateKey   String
  oprfPublicKey    String @default("invalid")
}

model User {
  username                     String                 @id
  serverPrivateKey             String
  serverPublicKey              String                 @default("invalid")
  oprfPrivateKey               String
  oprfPublicKey                String                 @default("invalid")
  oprfCipherText               String
  oprfNonce                    String
  clientPublicKey              String
  sharedRx                     String?
  sharedTx                     String?
  resetPasswordToken           String?
  UserLoginAccessToken         UserLoginAccessToken[]
  // contains the device signingPrivateKey and encryptionPrivateKey
  // can be decrypted using the key storred in the OPAQUE envelope
  masterDeviceCiphertext       String
  // nonce to decrypt the masterDeviceCiphertext
  masterDeviceNonce            String
  masterDevice                 Device                 @relation(name: "masterDevice", fields: [masterDeviceSigningPublicKey], references: [signingPublicKey])
  masterDeviceSigningPublicKey String                 @unique

  devices        Device[]
  recoveryDevice RecoveryDevice?
}

model UserLoginAccessToken {
  accessToken String    @id @unique
  expiresAt   DateTime?
  user        User      @relation(fields: [username], references: [username])
  username    String
}

model RecoveryDevice {
  // contains the device signingPrivateKey and encryptionPrivateKey
  // can be decrypted using the key exposed to the user during recovery setup process
  ciphertext                                 String
  // nonce to decrypt the ciphertext
  nonce                                      String
  device                                     Device @relation(fields: [deviceSigningPublicKey], references: [signingPublicKey])
  deviceSigningPublicKey                     String @id
  user                                       User   @relation(fields: [userUsername], references: [username])
  userUsername                               String @unique
  // this cross signing makes sure that the master device and recovery device are linked and verifyable in both directions
  // signed by the user's recovery device
  signatureForMasterDeviceSigningPublicKey   String
  // signed by the user's master device
  signatureForRecoveryDeviceSigningPublicKey String

}

model Device {
  signingPublicKey             String          @id @unique
  encryptionPublicKey          String
  encryptionPublicKeySignature String
  // can't be mandatory since we need to create the device
  user                         User?           @relation(fields: [username], references: [username])
  username                     String?
  recoveryDevice               RecoveryDevice?
  userForMaster                User?           @relation("masterDevice")
}
