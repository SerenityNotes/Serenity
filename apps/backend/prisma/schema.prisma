datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  output          = "./generated/output"
}

model Document {
  id               String     @id
  activeSnapshot   Snapshot?  @relation(name: "activeSnapshot", fields: [activeSnapshotId], references: [id])
  activeSnapshotId String?    @unique
  snapshots        Snapshot[]
  createdAt        DateTime   @default(now())
}

model Snapshot {
  id                     String    @id @default(uuid())
  latestVersion          Int
  data                   String
  preview                String // title & icon
  document               Document  @relation(fields: [documentId], references: [id])
  documentId             String
  updates                Update[]
  activeSnapshotDocument Document? @relation("activeSnapshot")
  createdAt              DateTime  @default(now())
  clocks                 Json
}

model Update {
  id              String   @id @default(uuid())
  version         Int
  data            String
  snapshot        Snapshot @relation(fields: [snapshotId], references: [id])
  snapshotId      String
  snapshotVersion Int
  pubKey          String

  @@unique([snapshotId, version])
  @@unique([snapshotId, pubKey, snapshotVersion])
}

model Registration {
  username         String @id
  serverPrivateKey String
  serverPublicKey  String @default("invalid")
  oprfPrivateKey   String
  oprfPublicKey    String @default("invalid")
}

model User {
  username                     String                 @id
  serverPrivateKey             String
  serverPublicKey              String                 @default("invalid")
  oprfPrivateKey               String
  oprfPublicKey                String                 @default("invalid")
  oprfCipherText               String
  oprfNonce                    String
  clientPublicKey              String
  sharedRx                     String?
  sharedTx                     String?
  resetPasswordToken           String?
  UserLoginAccessToken         UserLoginAccessToken[]
  OpaqueAuth                   OpaqueAuth?
  VirtualMasterDevice          VirtualMasterDevice?
  Device                       Device[]
  VirtualRecoveryDevice        VirtualRecoveryDevice?
  passwordResetOneTimePassword String?
}

model UserLoginAccessToken {
  accessToken String    @id @unique
  expiresAt   DateTime?
  user        User      @relation(fields: [username], references: [username])
  username    String
}

model OpaqueAuth {
  key             String @id
  serverPublicKey String
  user            User   @relation(fields: [username], references: [username])
  username        String @unique
}

model VirtualMasterDevice {
  id                            String @id @default(uuid())
  encryptionPrivateKey          String
  encryptionPublicKey           String
  signingPrivateKey             String
  signingPublicKey              String
  signedRecoverSigningPublicKey String
  signedDeviceSignignPublicKey  String
  user                          User   @relation(fields: [username], references: [username])
  username                      String @unique
}

model Device {
  id                   String @id @default(uuid())
  encryptionPrivateKey String
  encryptionPublicKey  String
  signingPrivateKey    String
  signingPublicKey     String
  user                 User   @relation(fields: [username], references: [username])
  username             String
}

model VirtualRecoveryDevice {
  id                                  String @id @default(uuid())
  encryptionPrivateKey                String
  encryptionPublicKey                 String
  signingPrivateKey                   String
  signingPublicKey                    String
  signedVirtualMasterSigningPublicKey String
  user                                User   @relation(fields: [username], references: [username])
  username                            String @unique
}
